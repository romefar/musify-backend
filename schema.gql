# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AlbumData {
  artist: String!
  image: [Image!]!
  mbid: ID!
  name: String!
  url: String!
}

type AlbumInfo {
  artist: String!
  image: [Image!]!
  listeners: Int!
  mbid: ID
  name: String!
  playcount: Int!
  tracks: [TrackShortInfo!]!
  url: String!
  wiki: AlbumWiki
}

type AlbumSearch {
  albums: [AlbumData!]!
  page: Int!
  totalResults: Int!
}

type AlbumWiki {
  content: String!
  published: String!
  summary: String!
}

type Artist {
  bio: Biography!
  image: [Image!]!
  mbid: ID
  name: String!
  ontour: Int!
  similar: [SimilarArtist!]!
  stats: Stat!
  streamable: Int!
  tags: Tag!
  url: String!
}

type ArtistAlbumItem {
  artist: ArtistShortInfo!
  image: [Image!]!
  mbid: ID
  name: String!
  playcount: Int!
  url: String!
}

type ArtistSearchItem {
  image: [Image!]!
  listeners: Int!
  mbid: ID
  name: String!
  streamable: Int!
  url: String!
}

type ArtistSearchResult {
  artists: [ArtistSearchItem!]!
  page: Int!
  totalResults: Int!
}

type ArtistShortInfo {
  mbid: ID
  name: String!
  url: String!
}

type ArtistTop {
  artists: [ArtistTopItem!]!
  page: Int!
}

type ArtistTopAlbums {
  albums: [ArtistAlbumItem!]!
}

type ArtistTopItem {
  image: [Image!]!
  listeners: Int!
  mbid: ID
  name: String!
  playcount: Int!
  streamable: Int!
  url: String!
}

type ArtistTopTracks {
  artist: ArtistShortInfo!
  image: [Image!]!
  listeners: Int!
  mbid: ID
  name: String!
  playcount: Int!
  streamable: Int!
  url: String!
}

type Biography {
  content: String!
  links: Link!
  published: String!
  summary: String!
}

type Image {
  size: String!
  text: String!
}

type Link {
  link: LinkItem!
}

type LinkItem {
  href: String!
  rel: String!
  text: String
}

type LoggedInUser {
  email: String!
  id: String!
  name: String!
  token: String!
}

type Mutation {
  createUser(userInput: UserInput!): User!
  login(email: String!, password: String!): LoggedInUser!
  updatePassword(userInput: UserUpdatePasswordInput!): User!
}

type Query {
  album(album: String!, artist: String!, lang: String, mbid: String): AlbumInfo!
  artist(artist: String!, mbid: String): Artist!
  artistTopTracks(artist: String!, limit: Int, mbid: String, page: Int): [ArtistTopTracks!]!
  searchAlbum(album: String!, limit: Int, page: Int): AlbumSearch!
  searchArtist(artist: String!, limit: Int, page: Int): ArtistSearchResult!
  searchTrack(artist: String, limit: Int = 50, page: Int = 1, track: String!): TrackSearch!
  topAlbums(artist: String!, limit: Int, mbid: String, page: Int): ArtistTopAlbums!
  topArtists(limit: Int, page: Int): ArtistTop!
  topTracks(limit: Int = 50, page: Int = 1): TopTrack!
  track(artist: String!, mbid: String, track: String!): TrackInfo!
  user(id: String!): User
  users: [User!]
}

type ShortAlbumInfo {
  artist: String!
  image: [Image!]!
  mbid: ID
  title: String!
  url: String!
}

type SimilarArtist {
  image: [Image!]!
  name: String!
  url: String!
}

type Stat {
  listeners: Int!
  playcount: Int!
}

type Tag {
  tag: [TagItem!]!
}

type TagItem {
  name: String!
  url: String!
}

type TopTrack {
  page: Int!
  tracks: [Track!]!
}

type Track {
  artist: ArtistShortInfo!
  duration: Int!
  image: [Image!]!
  listeners: Int!
  mbid: ID!
  name: String!
  playcount: Int!
  url: String!
}

type TrackData {
  artist: String!
  image: [Image!]!
  listeners: Int!
  mbid: ID
  name: String!
  url: String!
}

type TrackInfo {
  album: ShortAlbumInfo
  artist: ArtistShortInfo!
  duration: Int!
  listeners: Int!
  mbid: ID
  name: String!
  playcount: Int!
  url: String!
  wiki: TrackWiki
}

type TrackSearch {
  page: Int!
  totalResults: Int!
  tracks: [TrackData!]!
}

type TrackShortInfo {
  duration: Float!
  name: String!
  url: String!
}

type TrackWiki {
  content: String!
  published: String!
  summary: String!
}

type User {
  email: String!
  id: ID
  image: String
  name: String!
  provider: String
  token: String
}

input UserInput {
  email: String!
  image: String
  name: String!
  password: String!
}

input UserUpdatePasswordInput {
  id: String!
  newPassword: String!
  oldPassword: String!
}
